/**
 * JCache compatibility adapter.
 */
import org.gradle.plugins.ide.eclipse.model.Library

apply plugin: 'eclipse'

configurations {
  tckSources
  tck
  doc
}

dependencies {
  api project(':caffeine')
  api libraries.jcache
  api libraries.config
  api libraries.jsr330
  api libraries.osgiComponentAnnotations

  testImplementation libraries.guava
  testImplementation libraries.slf4jNop
  testImplementation testLibraries.mockito
  testImplementation testLibraries.hamcrest
  testImplementation testLibraries.jcacheTck
  testImplementation testLibraries.jcacheTckTests
  testImplementation testLibraries.jcacheGuice
  testImplementation testLibraries.guavaTestLib

  tck dependencies.create(testLibraries.jcacheTckTests) {
    transitive = false
  }
  tckSources dependencies.create(testLibraries.jcacheTckTestSources) {
    transitive = false
  }

  doc "${libraries.jcache}:javadoc"
}

tasks.named('forbiddenApisTest').configure {
  bundledSignatures -= 'jdk-system-out'
}

tasks.named('compileJava').configure {
  modularity.inferModulePath = false
}

tasks.named('jar').configure {
  bundle.bnd(
    'Bundle-SymbolicName': 'com.github.ben-manes.caffeine.jcache',
    'Import-Package': [
      '!org.checkerframework.checker.*',
      '*'].join(','),
    'Export-Package': [
      'com.github.benmanes.caffeine.jcache.spi',
      'com.github.benmanes.caffeine.jcache.copy',
      'com.github.benmanes.caffeine.jcache.configuration'].join(','),
    'Automatic-Module-Name': 'com.github.benmanes.caffeine.jcache',
    '-exportcontents': '${removeall;${packages;VERSIONED};${packages;CONDITIONAL}}',
    '-snapshot': 'SNAPSHOT',
    '-noextraheaders': true)
}

def unzipJCacheJavaDoc = tasks.register('unzipJCacheJavaDoc', Copy) {
  group = 'Build'
  description = 'Unzips the JCache JavaDoc'
  from configurations.doc.collect { zipTree(it) }
  into { layout.buildDirectory.dir('jcache-docs') }
}

tasks.named('javadoc').configure {
  dependsOn(unzipJCacheJavaDoc)
  options.addStringOption('Xdoclint:none', '-quiet')
  options.linksOffline(
    "https://static.javadoc.io/javax.cache/cache-api/${versions.jcache}/",
    relativePath(unzipJCacheJavaDoc.map { it.destinationDir }))
}

tasks.register('unzipTestKit', Copy) {
  group = 'Build'
  description = 'Unzips the JCache TCK'
  from configurations.tck.collect { zipTree(it) }
  into { layout.buildDirectory.dir('tck') }
  outputs.cacheIf { true }
}

eclipse.classpath.file.whenMerged {
  def tests = entries.find { (it instanceof Library) && (it.path ==~ /.*cache-tests.*-tests.jar/) }
  tests?.sourcePath = fileReference(file(configurations.tckSources.asPath))
}

tasks.named('test').configure {
  useJUnitPlatform()
  dependsOn(unzipTestKit)
  testClassesDirs += layout.buildDirectory.files('tck')

  systemProperties [
    // Test Compatibility Kit
    'java.net.preferIPv4Stack': 'true',
    'org.jsr107.tck.management.agentId': 'CaffeineMBeanServer',
    'javax.cache.Cache': 'com.github.benmanes.caffeine.jcache.CacheProxy',
    'javax.cache.Cache.Entry': 'com.github.benmanes.caffeine.jcache.EntryProxy',
    'javax.cache.CacheManager': 'com.github.benmanes.caffeine.jcache.CacheManagerImpl',
    'javax.management.builder.initial':
      'com.github.benmanes.caffeine.jcache.management.JCacheMBeanServerBuilder',

    // OSGi tests
    'config.osgi.version': versions.config,
    'jcache.osgi.version': versions.jcache,
    'felixScr.version': testVersions.felixScr,
    'osgiUtil.promise': testVersions.osgiUtilPromise,
    'osgiUtil.function': testVersions.osgiUtilFunction,
    'osgiService.component': versions.osgiComponentAnnotations,
    'caffeine.osgi.jar': relativePath(project(':caffeine').jar.archivePath.path),
    'caffeine-jcache.osgi.jar': relativePath(project(':jcache').jar.archivePath.path),
  ]
}
